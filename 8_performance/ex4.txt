Consider a processor where the individual instruction fetch, decode, execute, memory, and writeback
stages in the datapath have the following latencies:
IF      ID      EX      MEM     WB
150ps   50ps    200ps   100ps   100ps

We assume a classic RISC instruction set where all 5 stages are needed for loads (lw), but the writeback [WB] stage is not necessarily
needed for stores (sw) and the memory [MEM] stage is not necessarily needed for register (R-format) instructions.
Instead of a single-cycle organization, we can use a multi-cycle organization where each instruction takes multiple clock cycles but one
instruction finishes before another is fetched. In this organization, an instruction only goes through stages it actually needs
(e.g. sw only takes four clock cycles because it does not need the [WB] stage). Compare clock cycle times and execution times with
single-cycle, multi-cycle, and pipelined organization.

Exercise 4.1: Calculate the clock cycle time for a single-cycle, multi-cycle, and pipelined implementation of this datapath.
- Clock cycle time for a single-cycle implementation = 150ps + 50ps + 200ps + 100ps + 100ps = 600ps
- Clock cycle time for a multi-cycle implementation = latency of the longest stage = 200ps
- Clock cycle time for a pipelined implementation = latency of the longest stage = 200ps

Exercise 4.2: What are the best and worst case total latencies for an instruction in each of the 3 designs
(single cycle, multi-cycle, pipelined)? Note: express instruction latency both in number of cycles as well as in total time (ps).
Based on these numbers, which design would you prefer? Explain.
- Best case latency for a single-cycle implementation = 600ps = worst case latency for a single-cycle implementation.
- Number of cycles for a single-cycle implementation = 1

- Best case latency for a multi-cycle implementation (R-format) = 4 * 200 ps = 800ps
- Number of cycles for a multi-cycle implementation = 4
    --> IF, ID, EX and WB are used.
- Worst case latency for a multi-cycle implementation = 5 * 200 ps = 1000ps
- Number of cycles for a multi-cycle implementation = 5
    --> All stages are needed for a load instruction.

- Best case latency for a pipelined implementation = 600ps = worst case latency for a pipelined implementation.
- Number of cycles for a pipelined implementation = 5

Based on these numbers, a multi-cycle implementation would be preferred since this minimizes the latency of a single instruction.
However, a pipelined implementation is preferred if we consider the execution of a lot instructions, since this improves the throughput.

Exercise 4.3: Consider the following RISC-V program:
    1 addi t0, zero , 10
    2 sw zero , 4(t1)
    3 lw t2, 10(t3)
For each of the 3 CPU designs (single-cycle, multi-cycle, pipelined), we provide a grid below where the horizontal axis represents time
(every cell is 100 ps), and the vertical axis lists the instruction stream. First draw the clock signal indicating at which time intervals
a new CPU cycle starts, and then visualize how the processor executes the instruction stream over time. Clearly indicate the start and end
of each of the 5 datapath stages (IF, ID, EX, MEM, WB) for all instructions. Note: you can assume the CPU starts from a clean state
(e.g., after a system reset).
See ex4.3.JPG

Exercise 4.4: What is the total time and cycles needed to execute the above RISC-V program from question (4.3) for each of the three
CPU designs? What if we add 50 no-operation instructions (add zero, zero, zero)? Provide a formula to explain your answer.
Single-cycle design: Total time = 3 * 600ps = 1800ps. Number of cycles = 3
Single-cycle design - add 50 nop's: Total time = (3 + 50) * 600ps = 31,800ps. Number of cycles = 53

Multi-cycle design: Total time = (4 + 4 + 5) * 200ps = 2600ps. Number of cycles = 13
Multi-cycle design - add 50 nop's: Total time =(4 + 4 + 5) * 200ps + (50 * 4) * 200ps = 42,600ps. Number of cycles = 213

Pipelined design: Total time = 5 * 200ps + 2 * 200ps = 1400ps. Number of cycles = 7
Pipelined design - add 50 nop's: Total time = 5 * 200ps + 2 * 200ps + 50 * 200ps = 11,400ps. Number of cycles = 57
